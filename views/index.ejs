<!doctype html>
<html lang="en">

<head>
  <!-- Required meta tags -->
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="stylesheet" href="resources/css/style.css">
  <title>Welcome</title>
  <style>

  </style>
</head>

<body class="text-center">
  <div class="contenedor">
    <% if (login) { %>
      <h1 class="usuario">Usuario conectado: <strong>
          <%= name %>
        </strong></h1>
      <div class="des-form">
        <form>
          <h1>Cifrado DES</h1>
          <p for="original">Mensaje</p>
          <input id="original" type="text">
          <label> Hexadecimal
            <input type="radio" id="opcionHexMensaje" name="opcionMensaje" value="Hex" checked>
          </label>
          <label> Texto
            <input type="radio" id="opcionTextoMensaje" name="opcionMensaje" value="Texto">
          </label>
          <p for="llave">Llave</p>
          <input id="llave" type="text">
          <label> Hexadecimal
            <input type="radio" id="opcionHexLlave" name="opcionLlave" value="Hex" checked>
          </label>
          <label> Texto
            <input type="radio" id="opcionTextoLlave" name="opcionLlave" value="Texto">
          </label>
          <button id="botonCifrar" class="des-btn-cifrar" type="button">Cifrar</button>
          <button id="botonDescifrar" class="des-btn-descifrar" type="button">Descifrar</button>
          <hr>
          <label id="labelResultado" for="encrypted">Mensaje cifrado</label>
          <input id="encrypted" type="text" value="" readonly="">
        </form>
        <script type="module">
          //const des = require('../des.js');
          //import * as des from '../des.js';

          const
            PC1 = [                                //Primera permutación a llave inicial  
              57, 49, 41, 33, 25, 17, 9,
              1, 58, 50, 42, 34, 26, 18,
              10, 2, 59, 51, 43, 35, 27,
              19, 11, 3, 60, 52, 44, 36,
              63, 55, 47, 39, 31, 23, 15,
              7, 62, 54, 46, 38, 30, 22,
              14, 6, 61, 53, 45, 37, 29,
              21, 13, 5, 28, 20, 12, 4
            ],
            PC2 = [                               //Segunda permutación a llave inicial (despues de desplazamientos)
              14, 17, 11, 24, 1, 5,
              3, 28, 15, 6, 21, 10,
              23, 19, 12, 4, 26, 8,
              16, 7, 27, 20, 13, 2,
              41, 52, 31, 37, 47, 55,
              30, 40, 51, 45, 33, 48,
              44, 49, 39, 56, 34, 53,
              46, 42, 50, 36, 29, 32
            ],
            IP = [                                //Permutación inicial a mensaje (Initial Permutation)
              58, 50, 42, 34, 26, 18, 10, 2,
              60, 52, 44, 36, 28, 20, 12, 4,
              62, 54, 46, 38, 30, 22, 14, 6,
              64, 56, 48, 40, 32, 24, 16, 8,
              57, 49, 41, 33, 25, 17, 9, 1,
              59, 51, 43, 35, 27, 19, 11, 3,
              61, 53, 45, 37, 29, 21, 13, 5,
              63, 55, 47, 39, 31, 23, 15, 7
            ],
            E = [                                //E -> Expansión (Pasar de 32 a 48 bits a Rn)
              32, 1, 2, 3, 4, 5,
              4, 5, 6, 7, 8, 9,
              8, 9, 10, 11, 12, 13,
              12, 13, 14, 15, 16, 17,
              16, 17, 18, 19, 20, 21,
              20, 21, 22, 23, 24, 25,
              24, 25, 26, 27, 28, 29,
              28, 29, 30, 31, 32, 1
            ],
            S = [                                //S Boxes ( Sn(Bn) )
              [
                14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7,     //S-Box 1
                0, 15, 7, 4, 14, 2, 13, 1, 10, 6, 12, 11, 9, 5, 3, 8,
                4, 1, 14, 8, 13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 0,
                15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 3, 14, 10, 0, 6, 13
              ],
              [
                15, 1, 8, 14, 6, 11, 3, 4, 9, 7, 2, 13, 12, 0, 5, 10,     //S-Box 2
                3, 13, 4, 7, 15, 2, 8, 14, 12, 0, 1, 10, 6, 9, 11, 5,
                0, 14, 7, 11, 10, 4, 13, 1, 5, 8, 12, 6, 9, 3, 2, 15,
                13, 8, 10, 1, 3, 15, 4, 2, 11, 6, 7, 12, 0, 5, 14, 9
              ],
              [
                10, 0, 9, 14, 6, 3, 15, 5, 1, 13, 12, 7, 11, 4, 2, 8,     //S-Box 3
                13, 7, 0, 9, 3, 4, 6, 10, 2, 8, 5, 14, 12, 11, 15, 1,
                13, 6, 4, 9, 8, 15, 3, 0, 11, 1, 2, 12, 5, 10, 14, 7,
                1, 10, 13, 0, 6, 9, 8, 7, 4, 15, 14, 3, 11, 5, 2, 12
              ],
              [
                7, 13, 14, 3, 0, 6, 9, 10, 1, 2, 8, 5, 11, 12, 4, 15,     //S-Box 4
                13, 8, 11, 5, 6, 15, 0, 3, 4, 7, 2, 12, 1, 10, 14, 9,
                10, 6, 9, 0, 12, 11, 7, 13, 15, 1, 3, 14, 5, 2, 8, 4,
                3, 15, 0, 6, 10, 1, 13, 8, 9, 4, 5, 11, 12, 7, 2, 14
              ],
              [
                2, 12, 4, 1, 7, 10, 11, 6, 8, 5, 3, 15, 13, 0, 14, 9,     //S-Box 5
                14, 11, 2, 12, 4, 7, 13, 1, 5, 0, 15, 10, 3, 9, 8, 6,
                4, 2, 1, 11, 10, 13, 7, 8, 15, 9, 12, 5, 6, 3, 0, 14,
                11, 8, 12, 7, 1, 14, 2, 13, 6, 15, 0, 9, 10, 4, 5, 3
              ],
              [
                12, 1, 10, 15, 9, 2, 6, 8, 0, 13, 3, 4, 14, 7, 5, 11,     //S-Box 6
                10, 15, 4, 2, 7, 12, 9, 5, 6, 1, 13, 14, 0, 11, 3, 8,
                9, 14, 15, 5, 2, 8, 12, 3, 7, 0, 4, 10, 1, 13, 11, 6,
                4, 3, 2, 12, 9, 5, 15, 10, 11, 14, 1, 7, 6, 0, 8, 13
              ],
              [
                4, 11, 2, 14, 15, 0, 8, 13, 3, 12, 9, 7, 5, 10, 6, 1,     //S-Box 7
                13, 0, 11, 7, 4, 9, 1, 10, 14, 3, 5, 12, 2, 15, 8, 6,
                1, 4, 11, 13, 12, 3, 7, 14, 10, 15, 6, 8, 0, 5, 9, 2,
                6, 11, 13, 8, 1, 4, 10, 7, 9, 5, 0, 15, 14, 2, 3, 12
              ],
              [
                13, 2, 8, 4, 6, 15, 11, 1, 10, 9, 3, 14, 5, 0, 12, 7,     //S-Box 8
                1, 15, 13, 8, 10, 3, 7, 4, 12, 5, 6, 11, 0, 14, 9, 2,
                7, 11, 4, 1, 9, 12, 14, 2, 0, 6, 10, 13, 15, 3, 5, 8,
                2, 1, 14, 7, 4, 10, 8, 13, 15, 12, 9, 0, 3, 5, 6, 11
              ]
            ],
            P = [                                        //Permutación de S-Box
              16, 7, 20, 21,
              29, 12, 28, 17,
              1, 15, 23, 26,
              5, 18, 31, 10,
              2, 8, 24, 14,
              32, 27, 3, 9,
              19, 13, 30, 6,
              22, 11, 4, 25
            ],
            FINAL_IP1 = [                                //Permutación Final IP-1
              40, 8, 48, 16, 56, 24, 64, 32,
              39, 7, 47, 15, 55, 23, 63, 31,
              38, 6, 46, 14, 54, 22, 62, 30,
              37, 5, 45, 13, 53, 21, 61, 29,
              36, 4, 44, 12, 52, 20, 60, 28,
              35, 3, 43, 11, 51, 19, 59, 27,
              34, 2, 42, 10, 50, 18, 58, 26,
              33, 1, 41, 9, 49, 17, 57, 25
            ],
            NUM_LEFT_SHIFTS = [1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1];         //Número de desplazamientos hacia la izquierda
          //Aplicados a Cn y Dn

          /**
           * Divide una cadena en n cantidades. La división se hace una vez llegado al número
           * de caracteres por subcadena.
           * Ejemplo: chunkString("hola", 3) = [ 'hol', 'a' ]
           * @param {*} str Cadena a dividir
           * @param {*} len número de caracteres que tendrá cada cadena
           * @returns Un arreglo con las subcadenas obtenidas
           */
          const chunkString = (str, len) => str.match(new RegExp('.{1,' + len + '}', 'g'));

          function asciiToHex(str) {
            var arr1 = [];
            for (var n = 0, l = str.length; n < l; n++) {
              var hex = Number(str.charCodeAt(n)).toString(16);
              arr1.push(hex);
            }
            return arr1.join('');
          }

          function hexToAscii(str1) {
            var hex = str1.toString();
            var str = '';
            for (var n = 0; n < hex.length; n += 2) {
              str += String.fromCharCode(parseInt(hex.substr(n, 2), 16));
            }
            return str;
          }

          /**
           * Convierte un número hexadecimal a uno binario.
           * @param {*} hex Valor hexadecimal
           * @returns El número convertido a binario.
           */
          const hexToBin = (hex) => ("00000000" + (parseInt(hex, 16)).toString(2)).substr(-8);

          /**
           * Convierte un número decimal a uno binario.
           * @param {*} dec Valor decimal
           * @returns El número convertido a binario.
           */
          const decToBin = (dec) => ("0000" + (parseInt(dec, 10)).toString(2)).substr(-4);

          /**
           * Convierte un número binario a uno hexadecimal.
           * @param {*} bin Valor binario
           * @returns El número convertido a hexadecimal.
           */
          const binToHex = (bin) => parseInt(bin, 2).toString(16);

          /**
           * Convierte la llave inicial (en hexadecimal) a un valor binario (de 64 bits). 
           * @param {*} llave Llave inicial a convertir
           * @returns La llave inicial en formato binario
           */
          const bin = llave => chunkString(llave, 2).map(hex => hexToBin(hex)).join("");

          /**
           * Desplaza una cadena n cantidad de posiciones hacia la izquierda.
           * @param {*} str Cadena a desplazar
           * @param {*} shift Número de desplazamientos
           * @returns La cadena con los desplazamientos
           */
          const desplazarCadena = (str, shift) => str.slice(shift, str.length) + str.slice(0, shift);

          /**
           * Genera las subllaves que se utilizaran en las rondas de encriptaciín.
           * @param {*} llave Llave inicial en hexadecimal
           * @returns Un arreglo con las 16 llaves de las rondas
           */
          const generarLlaves = (llave) => {
            let subllaves = [];
            let perm = PC1.map(index => llave[index - 1]).join("");   //Realiza la permutación PC-1
            let C0 = perm.substr(0, perm.length / 2);   //Genera C0 
            let D0 = perm.substr(perm.length / 2);      //Genera D0 
            let prevC0 = C0, prevD0 = D0;
            NUM_LEFT_SHIFTS.forEach((shift, i) => {
              C0 = desplazarCadena(prevC0, shift);      //Realiza los desplazamientos izquierdos para los bloques
              D0 = desplazarCadena(prevD0, shift);
              prevC0 = C0;
              prevD0 = D0;
              let pair = C0 + D0;     //Une C0 y D0
              subllaves.push(PC2.map(index => pair[index - 1]).join(""));   //Realiza la permutación PC-2
            });

            return subllaves;
          };

          /**
           * Expande el número de bits de un bloque.
           * @param {*} block Bloque a expandir
           * @returns El bloque con el aumento de bits
           */
          const expandirBloque = block => E.map(index => block[index - 1]).join("");

          /**
           * Realiza una operación XOR entre dos cadenas.
           * @param {*} str1 Primera cadena
           * @param {*} str2 Segunda cadena
           * @param {*} len Longitud de las cadenas
           * @returns La cadena resultande de la operación
           */
          const stringXOR = (str1, str2, len) => {
            let xor = Array(len);
            for (let i = 0; i < len; i++) {
              xor[i] = (str1[i] === str2[i] ? 0 : 1); //Realiza la operación con cada bit
            }
            return xor.join(""); //Une la cadena resultante
          }

          /**
           * Realiza la operación de sBoxes.
           * @param {*} bits Número de bits
           * @returns El resultante de las sBoxes
           */
          const sBoxOutput = bits => {
            return chunkString(bits, 6).map((group, sBox) => {
              let row = parseInt(group[0] + group[5], 2);
              let col = parseInt(group.slice(1, 5), 2);
              return decToBin(S[sBox][16 * row + col]);
            }).join("");
          };

          /**
           * Realiza el algoritmo de cifrado DES.
           * @param {*} msg Mensaje o cadena a cifrar
           * @param {*} llave Llave con la cual se hará el cifrado
           * @param {*} subllaves Subllaves a utilizar en las rondas
           * @returns El mensaje cifrado
           */
          const des = (msg, llave, subllaves) => {
            let perm = IP.map(index => msg[index - 1]).join(""); // Realiza la permutación inicial IP
            let L0 = perm.substr(0, perm.length / 2);     //Divide el mensaje en L0 y R0
            let R0 = perm.substr(perm.length / 2);

            let prevL0 = L0, prevR0 = R0;
            for (let i = 0; i < 16; i++) {    //Realiza las 16 rondas o iteraciones
              L0 = prevR0;
              let sBoxOut = sBoxOutput(stringXOR(subllaves[i], expandirBloque(R0), 48));    //Genera resultado de sBoxes y expande bloque
              let finalPerm = P.map(index => sBoxOut[index - 1]).join("");      //Realiza la permutación final de sBox
              R0 = stringXOR(prevL0, finalPerm, 32);      //Realiza una operación XOR entre L0 y el resultado de sBoxes
              prevL0 = L0;
              prevR0 = R0;
            }
            let pair = R0 + L0;   //Une R0 y L0
            let enc = FINAL_IP1.map(index => pair[index - 1]).join("");     //Realiza la permutación final IP-1
            return chunkString(enc, 4).map(binToHex).join("").toUpperCase(); //Devuelve el mensaje cifrado en hexadecimal
          }

          /**
           * Realiza la operación de cifrado
           * @param {*} msg mensaje a cifrar
           * @param {*} llave llave inicial con la cual se hará el cifrado
           * @returns Cadena con el mensaje cifrado
           */
          const cifrar = (msg, llave) => des(msg, llave, generarLlaves(llave));

          /**
           * Realiza la operación de descifrado
           * @param {*} msg mensaje a decifrar
           * @param {*} llave llave inicial con la cual se hará el decifrado
           * @returns Cadena con el mensaje decifrado
           */
          const descifrar = (msg, llave) => des(msg, llave, generarLlaves(llave).reverse());

          let mensajeInput = document.querySelector("#original");
          let llaveInput = document.querySelector("#llave");
          let mensajeOutput = document.querySelector("#encrypted");
          let botonCifrar = document.querySelector("#botonCifrar");
          let botonDescifrar = document.querySelector("#botonDescifrar");
          let mensaje = mensajeInput.value;

          mensajeInput.addEventListener("input", characterEntered, false);
          llaveInput.addEventListener("input", characterEntered, false);

          botonCifrar.onclick = function () {
            cifrarM();
            document.getElementById('labelResultado').innerHTML = 'Mensaje cifrado';
          };

          botonDescifrar.onclick = function () {
            descifrarC();
            document.getElementById('labelResultado').innerHTML = 'Mensaje descifrado';
          };

          function characterEntered(e) {
            mensaje = e.target.value;
            mensaje = mensaje.toUpperCase();
            mensaje = mensaje.replace(/[^A-Z0-9]/, '');

            e.target.value = mensaje;
          }

          function cifrarM() {
            let llave = llaveInput.value;
            let mensaje = mensajeInput.value;
            let encryptedMessage;


            if (document.querySelector('input[name="opcionMensaje"]:checked').value === "Texto") {
              mensaje = asciiToHex(mensaje);
            }

            if (document.querySelector('input[name="opcionLlave"]:checked').value === "Texto") {
              llave = asciiToHex(llave);
            }

            encryptedMessage = cifrar(bin(mensaje), bin(llave));
            mensajeOutput.value = encryptedMessage;

          }

          function descifrarC() {
            let llave = llaveInput.value;
            let mensaje = mensajeInput.value;
            let encryptedMessage;

            if (document.querySelector('input[name="opcionMensaje"]:checked').value === "Texto") {
              mensaje = hexToAscii(mensaje);
            }

            if (document.querySelector('input[name="opcionLlave"]:checked').value === "Texto") {
              llave = hexToAscii(llave);
            }

            try {
              encryptedMessage = descifrar(bin(mensaje), bin(llave));
              mensajeOutput.value = encryptedMessage;
            } catch (TypeError) {
              alert("Error: Introduzca una llave en el campo 'Llave'");

            }
          }
        </script>

        <%} else { %>
          <h1><strong>
              <%= name %>
            </strong></h1>
          <a href="login" class="a-login">Ir a Login</a>
          <% } %>
      </div>
</body>

</html>